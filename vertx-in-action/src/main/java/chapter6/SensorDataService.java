package chapter6;

import io.vertx.codegen.annotations.ProxyGen;
import io.vertx.codegen.annotations.VertxGen;
import io.vertx.core.AsyncResult;
import io.vertx.core.Handler;
import io.vertx.core.Vertx;
import io.vertx.core.json.JsonObject;

/**
 * The interface is completely agnostic of the event bus. The interface has methods with trailing callback parameters
 * so the caller will be notified asynchronously of responses and errors.
 *
 * The Handler<AsyncResult<T>> type is commonly used for callbacks in Vert.x APIs, where T can be anything but is
 * typically a JSON type.
 *
 * It is idiomatic for service interfaces to have factory methods for both the service implementations (create) and
 * proxies (createProxy).
 *
 * The SensorDataServiceVertxEBProxy class is generated by the Vert.x code generator, and if you peek into it, you
 * will see event-bus operations. There is also a SensorDataServiceVertxProxyHandler class thatâ€™s generated, but
 * only Vert.x will use it, not your code.
 *
 * @author sm@creativefusion.net
 */
@ProxyGen // To generate an event-bus proxy
@VertxGen // To generate RxJava 2 / Kotlin / whatever bindings
public interface SensorDataService {

    // Factory method for creating a service instance
    static SensorDataService create(Vertx vertx) {
        return new SensorDataServiceImpl(vertx);
    }

    // Factory method for creating a proxy
    static SensorDataService createProxy(Vertx vertx, String address) {
        return new chapter6.SensorDataServiceVertxEBProxy(vertx, address);
    }

    // Asynchronously ask for a sensor value - Operation that takes a parameter and a callback
    void valueFor(String sensorId, Handler<AsyncResult<JsonObject>> handler);

    // Asynchronously ask for the average - Operation that takes no parameter and a callback
    void average(Handler<AsyncResult<JsonObject>> handler);
}
